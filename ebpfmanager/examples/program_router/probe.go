// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe1.o
// ebpf/bin/probe2.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbe1O = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x31\x6f\x13\x4b\x10\x9e\xb3\x63\xc7\x71\xde\x7b\x7a\xef\x09\xa1\xe8\xe4\xe2\x3a\x6c\x10\x8e\x8c\x10\x4a\x01\x52\xa4\x28\xa1\x89\x90\x85\xd2\x22\x6b\x39\x6f\x92\x53\x2e\x3e\xeb\x6e\x43\x12\x1f\x82\x34\x20\x94\x02\xa5\x81\x82\x8e\x06\xf1\x0f\x5c\x26\x74\x29\x53\xa6\x4c\x89\xa8\x42\x05\xa2\xe0\xd0\xec\xed\xfa\xf6\xd6\x77\x41\xe9\x19\xc9\xb9\x9d\x6f\x67\xf6\x9b\x99\x9d\xd9\x3c\x5f\x5c\x5e\x2a\x18\x06\x48\x31\xe0\x1b\x24\x5a\x22\xed\xc9\x64\x3d\x2f\xfe\xfe\x03\x06\x1c\x5e\x8d\xb1\xa1\x01\xd0\xa8\x02\x6c\x98\xdf\x23\xd4\x67\x0c\x80\x2d\x9f\x76\x71\x6d\xd5\x57\x16\x42\xf3\x7c\x84\x6f\x50\x66\xe1\xda\x26\x7d\x16\x9a\x9f\x47\xb8\xd5\xa3\xdb\xdc\xbe\x4f\xec\xd0\x3c\x8b\xe4\xb9\x28\x81\xf9\x23\xb6\x9b\x04\x70\xa8\x3f\x8b\x6b\xaf\x47\x1b\xe1\xe0\x34\xc6\x2b\x00\x75\xdb\x25\xdc\x36\x70\x56\xc3\xfd\x13\x8e\x1f\xbe\x8f\xfd\x27\x0d\x80\x93\x28\x8a\x86\x05\x80\x1b\x00\xf0\x02\x00\xca\xb8\x4f\xe2\xfd\x99\x42\x3a\xdf\x61\x11\x78\x1d\xd0\xee\x2f\x11\x47\x15\xd2\xf9\x11\xd7\xe5\x79\xd4\x57\x16\x1a\x6a\x7e\xcc\x62\xfc\x54\xc7\xb5\xec\x54\x7e\xb6\xb7\x85\x6b\xb7\xdb\xbb\x26\xf3\x93\xf1\x5f\x14\xef\x75\x25\xde\xa1\x88\xef\x8d\xf8\x8e\xd7\x3f\xe1\xa3\xa9\xfa\x9f\x8d\x70\xd7\xb5\x18\xae\x7d\x67\x6d\x2d\x34\x4f\x93\xf8\x18\x71\x78\x7c\x96\x4d\x42\x33\x8e\x67\x28\xee\x3d\x18\x7c\x19\xd5\x59\xd6\x9f\x6d\x7b\x8d\x70\xff\x38\xc6\xa7\xb4\xfa\xbf\x3b\x1a\xcb\xe7\xe8\x92\xf5\x2f\x28\xf5\xe7\xf9\x74\xad\x3a\xee\xad\x2c\x34\xaa\x6a\x5d\xe5\x3d\xac\x12\xc7\x4d\xe5\x99\xba\x07\x25\x4f\xba\xc3\xf3\xa7\x7e\x6f\x94\xa7\xcc\x43\xc6\x1d\x0c\xce\x73\xe3\x6f\x5d\x70\x1f\x45\x00\x98\x10\xbf\x22\xfc\x11\x5d\xb0\x47\xb0\x3f\xb0\x87\x70\x7e\x71\xe6\x71\xde\xf1\x4d\xc0\xf7\x00\xdf\x0c\xec\x57\xec\xe5\x4c\x7b\xdb\xdb\xc2\xf9\xc1\x19\xc3\x7b\xc5\xbb\x57\xcc\x53\xf6\xd8\x9f\x8a\x19\xc3\x7e\xa7\x17\x9c\xcf\xed\xe9\x0e\xc3\xbe\x70\x15\x47\xec\xab\x91\xd7\xfd\xf6\x32\xfa\xfd\x8c\x22\xde\x1f\xff\x0a\x5e\x63\xf0\x10\x2a\x4f\xa7\x0d\xde\xab\xe2\x27\x65\x4f\x79\x50\x6b\x00\x70\x5b\xd9\x3b\xc8\x7a\x6c\x33\xe4\x19\xef\xa9\xaf\x51\xd6\x5e\x31\xa7\xd3\x8a\x50\x1a\xc3\x16\x01\xe0\x3f\x98\x1a\xe9\x13\xe2\x7b\x97\xe3\xd5\x31\xfc\x01\x00\xfc\xaf\x9c\x2f\x73\x31\x39\x5e\x1a\xcb\xa3\xcc\xcf\x49\xfe\x59\xd4\x04\x7e\x2c\x74\x54\x2b\x19\x7a\x4d\xd1\x71\xee\xe7\x14\x9d\xb3\x6f\x92\x7e\x30\xcb\xec\x4e\xdf\xf7\xd6\x3a\xc4\xf7\xc9\x2e\x34\x19\x0e\x72\x72\x81\x1d\xb6\xed\x41\xd3\xa7\x6e\xfa\x4e\xa1\xf3\x84\xfa\x81\xe3\xf5\xa0\xe3\x3a\x36\xed\x05\x54\xf5\xf1\x7a\x54\xf7\x91\x50\x93\xae\x77\x56\x7d\xb2\x49\x01\x49\x5b\x4d\x1b\x9a\x01\xf3\x19\x79\x0c\xcd\x60\x77\x93\x7f\x7d\xaf\x4b\x18\x41\xb8\xd5\x6c\xdd\xc9\xbc\x85\xcb\xc9\xcb\x9c\x77\xe3\x63\x39\xfe\x7e\xd0\x70\xbd\x7d\xae\x08\xac\xac\xe1\xf3\x39\x7c\x13\x9a\x4e\x7e\xe3\xbf\xa7\x11\x56\x34\xbb\x47\x00\x4a\x77\x25\xb2\x2e\x0e\x94\xf3\xf2\xb7\xc8\x53\xfa\x4b\xfc\x66\x0e\xff\x91\xe0\xd5\xe7\x45\xe7\x6f\xe4\xf0\xef\x64\xf0\x97\x32\xf8\x0d\xb5\xe7\x14\x69\x0b\xa0\xa6\xf1\xeb\xf5\x7b\x2b\xfc\x6f\x69\x78\x5f\x18\x7e\xd2\x70\x95\x17\x65\x29\x87\xbf\x55\xca\xe6\xd3\xef\xff\x5e\x8e\xff\x5c\x8e\xbf\xae\x33\x65\x06\x55\x99\x17\xfe\x6d\x0d\xd7\xeb\xdf\xcf\xa9\xff\x2b\x51\x7f\x4b\xe8\x58\xff\xe9\x8c\xfa\xbf\xce\xe0\x46\x39\x10\xfc\xa7\x42\x37\x44\xec\xd2\x5f\xbe\xb7\xbf\x02\x00\x00\xff\xff\x7e\x45\x68\xe6\xd0\x0a\x00\x00")

func bindataProbe1OBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbe1O,
		"/probe1.o",
	)
}



func bindataProbe1O() (*asset, error) {
	bytes, err := bindataProbe1OBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe1.o",
		size: 2768,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1623841335, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProbe2O = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x8f\xd3\x40\x10\x7d\x9b\x0b\x39\xdf\x41\x71\x47\x75\x58\x20\xb9\xe3\xae\x38\xc3\x5d\x81\x68\x90\x4e\xe2\x5b\x4a\x01\x88\x86\xca\x5a\x9c\x4d\x62\xc9\x49\x60\xbd\x42\x01\x23\x51\xd1\xa7\xe1\x07\xf0\x2b\x52\xd2\x52\xa6\xa4\xa4\xa4\x84\x0a\x0a\xc4\xa2\x31\xbb\xb6\xb5\x76\x44\x9e\xe4\xec\xcc\x4b\x66\xe7\xbd\xc9\xf8\xdd\xdd\xfe\xbd\x0e\x63\xb0\x60\xf8\x89\x2a\xab\xb0\xe8\x54\xf1\x99\xf9\xdc\x05\xc3\x92\x01\x4f\x6f\x1f\xed\xc6\xfe\x2f\x4d\xec\x01\x03\x46\x23\x21\x29\x16\x83\xe0\x30\xf7\xbf\x97\x7c\xcc\xd3\x94\xe2\x40\xc9\x24\xf7\xbf\x95\xbc\x38\x0a\x14\xc5\x3c\x49\x83\xdc\xff\x5a\xf2\x89\x90\xd7\x28\x56\x63\x29\x72\xff\x4b\xc9\x1f\xc6\x29\xa7\x38\xcb\x92\x61\xee\xaf\x0a\x7e\x69\x44\x67\xfe\xef\x22\xff\xf4\xf1\x5f\xbe\xcd\x80\x95\xd6\x7a\xd9\x01\x8e\x01\xbc\x07\xd0\xa3\xdf\x1b\x2f\x1f\x1c\x9f\x74\x37\xdd\x4b\xbd\xa9\x2f\x69\x23\x5d\xa4\x9d\x74\x93\x37\xf2\x45\x9e\x71\xff\x51\x9f\x6a\xfe\x68\xad\xf7\xec\xfc\xde\x3c\x81\xf7\xf6\x3c\xbb\x40\x5a\xcd\x63\xf1\xb9\x65\xae\x2e\x1e\x02\xe8\xe2\x87\x6e\xfb\x6e\x0b\x5b\x0d\x8e\xfa\xee\xe3\x5c\x99\x77\xcd\xb9\x5d\xf0\xbd\x06\x7f\x15\xc0\xc5\xda\x3d\x56\xd3\x65\xab\x1f\x40\xf1\x57\x87\x4a\xcc\x15\xa2\x57\x42\x66\xc9\x6c\x8a\x28\x4d\x62\x31\xcd\x04\x42\x29\xd2\x50\x8c\xa3\xa1\xe4\x13\x81\x6a\x5a\x51\x31\x2d\xb8\xe3\xc3\x0b\x39\x1b\x9d\x86\x31\xc2\x4c\x49\xc5\x9f\x23\xcc\x5e\x4f\x8a\x53\xce\x06\x5c\x71\xa2\x4f\xc2\x93\x1b\x1b\x8c\x66\x23\x3c\x2e\xe6\xd4\xc4\x81\xd9\xdf\x97\x0e\xef\xee\x3a\x33\x4f\xcf\xe1\xcf\xd6\xf4\xeb\x3a\xf9\xcd\xff\xd4\xbb\x3b\xe0\x39\x39\x37\xf5\xa7\x0e\xbf\x67\x84\x1e\xbb\xbc\xe3\x63\xdf\xc4\xee\x0c\x6e\xb1\x76\xbd\xae\x7f\x6f\x4d\xfd\x9d\x35\xf5\x6e\x7e\xa5\xbe\x43\x35\x3c\x30\xf5\xd7\x5b\xfa\xd5\x71\x09\xc0\x0e\x9a\xf0\xcc\x85\xd6\xef\x8e\xd9\x71\x5b\x6f\xf9\x67\x2d\xbd\x09\x73\xd3\x7f\x61\x72\xeb\xd1\xd6\xdb\xf7\xf4\x6f\x00\x00\x00\xff\xff\x6a\xa6\xeb\x6f\x10\x05\x00\x00")

func bindataProbe2OBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbe2O,
		"/probe2.o",
	)
}



func bindataProbe2O() (*asset, error) {
	bytes, err := bindataProbe2OBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe2.o",
		size: 1296,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1623841336, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe1.o": bindataProbe1O,
	"/probe2.o": bindataProbe2O,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe1.o": {Func: bindataProbe1O, Children: map[string]*bintree{}},
		"probe2.o": {Func: bindataProbe2O, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
