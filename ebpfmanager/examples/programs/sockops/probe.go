// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbf\x4f\x22\x41\x14\xfe\x76\xe1\xf8\x79\x05\x77\x50\x5c\x71\x97\xd0\x50\x1c\xc5\xe6\x38\x13\x0b\x2a\x42\x22\x26\x86\x82\x58\xda\x6c\x96\x65\x88\x44\x60\xc9\xee\xc6\xa0\x98\x58\xd9\xdb\xd8\xeb\x7f\x60\x47\xa9\x7f\x84\x85\x25\xa5\xa5\x56\x76\xae\x99\x61\x06\x36\x6f\xd9\xc8\x97\xcc\xbe\x79\xdf\xe4\xfd\xf8\x66\xde\x5e\xee\xb5\x5b\xba\xa6\x41\x41\xc3\x3b\xd6\xde\x1a\x05\x7d\xbd\x6f\xc8\x6f\x0e\x1a\xe6\x3a\xd0\x2b\xe7\x60\x57\x5f\x03\xce\xfe\xd2\x81\x13\x67\xe2\xf1\x7d\xb9\x5e\xae\xcc\xaa\x2f\x2b\x9e\x35\x3b\x2d\xc1\x7b\x8e\x3d\xab\x2e\x04\x6f\x15\x97\x39\x1f\xee\x96\x36\xad\x01\x8b\x20\x08\x78\xde\x12\x80\x2b\x00\x29\x00\x73\x59\xfb\x86\xf4\xc5\x73\xf2\x7c\xbc\x26\xaf\xc7\x7b\xd9\xef\xb4\xf1\x11\x04\x22\x7f\x41\xe9\x3a\x3f\x44\xe6\x22\xaf\x7d\xe7\xbd\xc8\xa5\x30\xdd\xa0\x97\x62\x07\x40\x12\x6f\xc1\xa6\xb3\x04\x12\x11\xee\x37\x80\x1f\xf8\xb6\xf2\x93\xd2\x16\x05\x9f\x8a\xf0\x69\x00\x3f\x43\x79\xa6\xa1\x3c\xa2\x7f\x00\xe2\x09\x0c\x9f\x4d\x7d\x74\x27\x7d\x53\xaa\x86\x79\xca\x5c\x6f\xe0\x8c\x61\x0e\x07\x36\x1b\x7b\x0c\x86\xcb\x86\x06\x3b\x36\xfb\xae\x35\x62\x18\x59\x83\xb1\x61\xc3\xf0\x7c\xd7\xb7\xba\x30\xbc\xb3\x91\xb0\xae\xd3\xb3\x7c\x8b\xd3\x35\xa3\xb6\xbb\xc5\x1d\x6c\x83\xba\xb8\x8f\x28\xee\xe5\x50\x1d\x11\x9e\xce\x9a\x26\x57\x8a\xf0\x8d\x98\x7a\x49\xe2\xe7\xbf\x88\xa7\x6f\x9d\x21\xfe\x81\x8c\xff\x4f\xf8\x47\x69\x4b\x84\x2f\x10\x1d\x7f\xe4\x9e\xde\xc1\x53\x4c\xbf\x54\x7f\x29\x26\xfe\x39\x26\x9e\xfa\x7f\xc3\xb3\x12\xc2\x42\xda\x7f\x84\xa7\xfa\x2b\x00\xb2\x88\xe2\x56\x36\xaa\xf4\x66\xe5\xcc\xaa\x78\xc5\x37\x37\xd4\x16\xe7\x32\xfe\x5a\xfa\x4a\xa3\x8a\x57\xff\xe3\x67\x00\x00\x00\xff\xff\xe7\xd3\x2e\x3d\x90\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1168,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1684503851, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
