// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xbf\xab\xd3\x50\x14\xc7\xbf\x37\x2f\xf6\xf5\x3d\x1d\x9e\x0e\x22\xc1\x07\x5d\x14\x5d\xee\xb3\x0e\x2a\xb8\x74\xa9\x3a\x44\x10\x75\x14\x42\x6c\x23\x0d\xcd\x8f\x92\x04\x51\x2b\x38\xb9\xbb\x08\xae\xfe\x15\x1d\x5d\xfd\x13\x1c\x3b\x3a\xea\xa4\x83\x7a\xe5\xc4\x73\x9b\x72\x9a\x52\x0f\xdc\xde\xfb\xfd\x34\xdf\x9c\x1f\xbd\x7d\x33\xf4\xef\x38\x4a\xc1\x86\xc2\x0f\x34\xaa\x89\x7b\x4e\x73\x1e\xf0\xe7\x21\x14\x16\x0a\xc8\xaa\xab\x87\x23\xef\xa7\x21\x7a\x41\x01\x93\x3c\x9f\xd2\xb9\x37\xcb\xe3\xb9\xf7\x6d\xc5\xe3\xa2\x77\x85\xce\xfe\xa3\xfb\xbd\xb9\xf7\x75\xc5\x67\x61\x35\xa1\x73\x90\x4e\xc7\x73\x6f\x59\xf3\x05\x17\x51\x7a\xbf\x6a\xfd\xe9\xe3\x3f\xbd\xaf\x80\xa5\x31\x66\xe1\x00\xc7\x00\xde\x02\xe8\xd0\xf3\x5c\xdb\x7b\x51\x37\xbd\x9b\xde\x4b\xb9\x29\x2f\xd5\x46\x75\x51\xcd\xb8\xfb\xc0\xa7\x67\xfe\x18\x63\x8e\x6c\xff\xaf\x1e\xa2\xfb\xfa\xb4\x3a\x43\xb5\xf1\xb2\xf1\xa1\x65\x2e\x32\x86\x00\x5c\x7c\x37\x6d\xdf\xed\x61\x6f\x83\xed\x03\x38\xb7\xc6\x6d\x0e\x0d\xe0\x2c\x4e\xad\xb8\xcb\xfb\xa5\x9a\x77\x36\xf8\x45\xde\x1d\x5e\xd0\x55\xf4\xa2\x42\x52\xa6\x41\x33\x02\x92\x27\x6b\x32\x78\x1e\x15\x65\x9c\x67\x08\x92\x78\x14\x65\x65\x04\x5d\x44\x89\x8e\x26\xc1\xb3\x22\x4c\x23\xa4\x61\x9c\xe9\x11\x74\x59\x15\x55\xf8\x14\xba\x7c\x99\xd6\x7b\x91\x8f\xc3\x2a\x24\xdc\xd7\xfd\x1b\xff\x31\x95\xdd\xe1\xd7\xf3\xd9\x8c\x2f\x7c\x0f\x12\xc1\xe5\x1d\x55\xbc\x3a\x82\x0f\xb6\xe4\x73\x85\x3e\xbf\xc3\x2f\x7f\xfb\xae\xd0\x4f\xd8\x7f\x5d\xf0\x25\xef\xc7\x82\x1f\x89\x3e\x4e\xf8\x2c\x67\xf0\x7b\x4b\xbd\xb2\xff\xcb\x5b\xfc\xae\x6a\xf7\x4b\x7d\x9b\xfd\x8e\xe0\x5d\xf6\x5f\x93\x5c\xe8\x9b\x00\x0e\x5a\xe6\xfd\x99\xfd\xb6\xdf\x03\xbe\xf3\xd6\x6f\xf9\xe3\x96\xdc\x14\xb7\xd8\xff\x8e\xb5\xed\xd1\xfa\xed\xff\xf3\x6f\x00\x00\x00\xff\xff\x14\x50\x3e\xec\xc8\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1224,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1705246342, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
