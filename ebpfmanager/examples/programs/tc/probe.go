// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcf\x6b\x13\x41\x14\xfe\x26\x09\x6d\x8c\x0a\xd5\x53\x5d\x7a\x58" +
	"\x50\xa1\xbd\x8c\x56\xb4\x78\xd2\xd0\x62\x7a\xb0\x87\x22\xe9\x39\xae\xdb\x49\x5d\x4c\x36\x65\x67\x5b\x7f\x44\xd1" +
	"\x4b\x8f\x82\x08\x9e\xad\xfe\x05\xde\x72\xd4\x3f\xa1\x47\x8f\xbd\x08\x82\x1e\x2a\x08\xde\x5c\x79\x93\xd9\xec\x38" +
	"\xd9\x35\xc5\x0f\x36\xf3\xe6\xdb\xf9\xe6\x7d\xf3\xde\x66\x9e\xdf\x5a\x6b\x94\x18\x43\x0a\x86\x5f\xc8\x66\x19\xaa" +
	"\x95\x2c\xae\xeb\xdf\xd3\x60\x18\x30\x60\x65\xa1\x06\xdf\x39\x4a\x88\x9d\x65\xc0\x56\x24\x24\xc5\xd2\x9d\x6f\xf6" +
	"\x9d\xaf\x23\x3e\x12\x9b\x2e\xc5\xbd\xd0\x15\x7d\xe7\x70\xc4\x8b\xd8\xf5\x29\xf6\xb6\xe3\x9d\xbe\xf3\x79\xc4\x87" +
	"\xe2\xa1\x5a\xbf\xed\xf9\x0f\xfa\xce\x81\xe2\x3f\xbe\x1b\x7a\x98\x66\xc0\x41\x92\x24\x83\x12\x70\x01\xc0\x1e\x80" +
	"\x29\x00\x03\xed\xf1\x8d\x1e\xc9\x5f\x73\x65\xa1\x66\xfa\x0b\xb7\x22\xa1\xfc\x49\x77\xbe\xc0\x5f\xf0\xbf\xfe\x06" +
	"\xba\x78\xd2\xf9\x59\xe8\xf7\xe2\x3f\xfc\xd2\x9e\xb4\x1f\xe5\xa4\x7c\xe4\x89\xea\x45\x35\xa5\x7a\x52\xad\x4d\x14" +
	"\xac\x0f\x42\x53\xb0\xba\xbe\x46\x6b\x7f\x27\x49\xf2\xf6\x1b\xc3\xac\xd5\x5b\x65\xd9\x7c\x51\x31\x9e\x2a\x80\x99" +
	"\x6c\x6d\x1a\xb2\x27\x77\x50\x7d\x7a\x92\x9d\xa2\x5a\xe8\x27\xc5\xbe\x11\xcf\x01\xb8\x6a\xcc\x3f\xe0\x78\xd8\x55" +
	"\xe9\x7f\x24\x79\xef\xca\x28\xe7\x6a\xca\xa8\x8c\x71\x37\x00\x9c\x51\x95\xce\x8e\x46\xb8\xa6\xf8\xe9\x31\xbe\x0d" +
	"\xe0\xac\xb1\x7f\x7a\x96\x0d\xc5\x57\xc6\xce\x31\xa7\x47\xaa\x61\x09\xc0\x75\x63\xae\x76\xe1\xb1\x78\x14\x83\x2f" +
	"\x37\x1b\x9c\x02\xbf\xe3\x49\x19\xb4\x03\x11\x5d\xd2\x3d\x32\xa9\x61\x9b\xd1\xda\x15\x91\x0c\x7a\x21\x5a\x9d\xc0" +
	"\x17\xa1\x14\xe0\x91\xe8\x70\x71\xbf\xd5\x8e\xbc\xae\x80\x56\xb6\xfc\x8e\x6c\xb5\x77\x42\x1f\xc2\x9a\x77\xbd\x20" +
	"\xe4\x3e\xb8\x8c\xa3\xd8\xbb\x07\x2e\x1f\x77\xd5\xb8\xdc\x6c\x80\x47\xbd\x4d\x2f\xf6\xe8\xdd\x22\x5f\x5c\x9a\xd8" +
	"\x89\xe3\xe1\x59\x7a\x5e\x0b\x77\x35\xf9\xde\xe2\xed\x3b\x86\xe9\x67\xca\xe2\xeb\x05\xf9\xec\x4e\x9f\x9f\xa0\xdf" +
	"\xb7\xf8\xaa\x35\x9f\x29\xd0\x1f\xea\xd1\xfe\x6e\x6d\xfd\x6b\xad\xbf\x62\xf1\xaf\xf4\x41\x37\x72\xf2\xc1\xa8\xc3" +
	"\x4d\xf3\x9b\x31\xf0\x45\x2f\xb0\xcf\x6b\xd7\x6f\xa9\x40\xff\xbd\x40\x6f\xcf\x5f\xe6\xec\x49\x38\xd2\xe4\xb9\x09" +
	"\xf9\xa7\x0b\xf4\x27\x4a\xc3\xd1\x9d\xa0\xbf\x6d\xfc\x87\x4c\x5c\xd6\xc4\xba\xc5\xdb\xf5\x5f\xa5\x5c\x39\xf9\xeb" +
	"\xe5\xbf\xf3\xd3\x7d\x55\x33\xf4\x69\x1f\xf6\x72\x72\x13\x5e\x68\xf2\x93\xe1\xbb\x62\xe8\xd3\x7b\xef\x4f\x00\x00" +
	"\x00\xff\xff\x81\x9a\x27\xd9\x48\x07\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1864,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1599737807, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
