// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcf\x6b\x13\x41\x14\xfe\x26\x89\x69\xb4\x3d\x54\xa1\x50\x83\x87" +
	"\x80\xf7\xd1\x7a\xa8\x47\x43\xc1\xe8\x21\x87\x22\xc5\x9b\x2c\xeb\x76\x8a\x8b\xf9\x21\xbb\x4b\xad\x56\x50\x04\xef" +
	"\x5e\x3c\x8b\x7f\x45\x8e\xfa\x4f\x78\xf3\x90\xa3\xe0\xa5\x82\x20\x5e\x1c\x79\xe3\x9b\xee\xf0\xb2\x4b\xf2\xc1\xe4" +
	"\xbd\xf7\xcd\x7c\xf3\x7e\x64\xd8\xd7\x77\x87\x83\x86\x52\xf0\x50\xf8\x8d\x32\x2a\x71\xd2\x28\xfd\x3e\xff\x6e\x40" +
	"\x61\xa6\x80\x63\x73\x78\x29\xe9\x9e\x59\x62\xb7\x15\x60\x8a\x5e\x46\xbe\x49\x4c\x7a\xda\xfd\x7e\xce\x4f\xcc\xf3" +
	"\x1e\xf9\xcf\xe2\xe4\xe9\x69\x77\xee\xf8\x19\x27\xcb\xbb\xbf\x5c\xfc\xf9\xd3\xff\x78\x4d\x01\x73\x6b\xed\xac\x01" +
	"\x6c\x01\x78\x07\xa0\x4d\xe7\xb9\x86\x0f\x6c\xe9\x4e\xba\x8f\x72\x52\x3e\xaa\x05\xf7\xf6\x87\xb4\xf7\xd7\x5a\xfb" +
	"\xf1\x87\xc2\xb6\xe8\xc5\xa5\x0c\x37\x5a\xc1\xea\x00\xd8\x2c\xcf\x7a\x57\xbd\x7c\x80\xce\xab\x75\xb5\x41\xbd\xf0" +
	"\xf2\x78\x53\x31\x2f\x89\x87\xee\xfa\x9f\xb6\x6a\xaf\x89\xe6\x02\x77\x07\xc0\x65\x5c\x38\x8f\x5b\x6c\x77\x1d\xdf" +
	"\x5e\xe0\xa9\xce\x2b\xc1\x3d\xbe\xa6\x6b\x41\xcf\xee\x2f\xd4\x85\x39\x29\xa0\xf7\x0e\x06\x9a\x9c\x7c\x4a\xb3\x8b" +
	"\xc8\x44\x47\xe9\xa8\x30\x19\x53\x37\x42\x2a\x3a\x36\x59\x9e\x4e\x27\x88\x46\x69\x62\x26\xb9\x81\xce\xcc\x48\x9b" +
	"\x27\xd1\x51\x16\x8f\x0d\xc6\x71\x3a\xd1\x09\x74\x5e\x64\x45\xfc\x18\x3a\x7f\x31\x76\x76\xef\x60\x00\x9d\x4d\x0f" +
	"\xe3\x22\xa6\xbd\x1d\xbd\xb3\xbb\xc2\xac\x56\xc1\x23\x37\xb7\x45\x9c\xf1\x7b\x7a\x2b\x78\xf9\xa6\x15\xaf\xb6\xe0" +
	"\xfb\x35\xf9\x5a\x22\xbe\xbe\x44\x2f\xdf\x44\x47\xc4\x19\xeb\x6f\x09\xfe\x0b\xdb\x2d\xc1\x6f\x8a\x3e\xfa\xec\xcb" +
	"\x19\x7c\xad\xa9\x57\xf6\x7f\xbb\x46\xff\xad\x46\x2f\xe3\x71\xc5\x9d\x84\x39\xdb\xab\x4b\xf2\xaf\xd5\xe8\xff\xb0" +
	"\xed\x2d\xd1\x0f\xc3\x37\x1d\xa0\xc7\x07\x6f\x0a\x5e\xce\xff\x3e\x80\x8b\x55\xf5\xb3\xde\xcf\x7b\x9d\xcf\x79\xbd" +
	"\xe7\x4d\x45\x6e\xc2\x3e\xeb\xdf\x07\x75\x37\x03\xbd\xff\x6e\xfc\x0b\x00\x00\xff\xff\x23\x8c\xef\x81\x78\x05\x00" +
	"\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1400,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594295120, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
