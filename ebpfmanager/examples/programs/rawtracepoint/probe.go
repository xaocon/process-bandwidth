// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbf\x6f\xd3\x40\x18\x7d\x97\x86\xb4\x0d\x48\x14\xc4\x50\x59\x48\x45\x62\xa1\x8b\xa1\x0c\x4c\x20\x75\x69\x61\xa8\x10\xea\x8c\x64\x19\xf7\x00\xab\xb5\x1d\xdd\x1d\x3f\x42\x90\x18\x10\x3b\x0b\x7f\x00\x1b\xff\x41\x46\xfe\x0d\xc6\x8c\x19\xc3\x04\x03\xca\xa1\xcf\xdc\x39\xe6\xb3\xa3\xe6\x49\xce\xdd\x7b\xce\xbb\x7b\xdf\x97\x2f\x1f\x0e\x8e\x0e\x3b\x42\xc0\x43\xe0\x17\x16\x6c\x81\x41\x67\xb1\xdf\x77\x9f\x7d\x08\x8c\x05\xb0\xdb\x07\x4e\x83\x3f\x96\x54\xe2\x45\x9a\x9b\x24\xf8\x5d\xf2\x6d\x01\xbc\x89\x8c\xa2\x7d\x9c\xc8\xc1\x28\x98\x55\x7a\x76\x92\x96\xfa\x8d\x5b\x2a\x1e\x05\xd3\x4a\x4f\x5e\xa8\x82\xf6\xaf\x06\x91\x1a\x05\x93\xea\x5c\x82\x0e\xe6\x25\xff\xfe\xf5\x1f\x5f\x17\xc0\xc4\x5a\x3b\xee\x00\x3b\x00\x3e\x01\xe8\xd1\xf7\x5d\xd6\x2f\xac\x0e\x3a\x9b\xce\xa5\xbb\xe9\x5e\xca\x46\xb9\x28\xf3\x6e\x1f\x0f\x9f\x1c\x01\x73\x6b\xed\x96\xef\xc7\xbb\x63\x6c\xbc\xbf\x28\x2e\x51\x36\xf7\x78\x7c\x6b\xe9\x13\xc7\x53\x00\x5d\xfc\xb4\x6d\xef\xd6\xb0\xd6\xd0\x0e\x00\x5c\xc1\x85\x8a\x77\xdd\x7a\xbf\xd4\x7b\x0d\x7d\x1d\xc0\xd5\xda\x39\x3e\xd3\x75\x9f\x1f\x40\xf9\xd3\x85\x46\xbe\x35\xf8\xbf\xe0\xa8\xde\x0d\xf6\xee\xb6\x1e\xea\x48\xe6\x46\x2a\x44\xaf\xa5\xd2\x69\x91\x23\x3a\x4b\x13\x99\x6b\x89\x50\xc9\xb3\x50\xbe\x8c\x9e\xab\x38\x93\xc8\xe2\x34\x0f\x13\x84\xda\x28\x13\x3f\x43\xa8\x87\x59\xb9\xaa\xe2\x24\x36\x31\xc9\x7b\xe1\xde\xbd\x15\x9a\xb5\x02\x92\xb2\x6f\x4d\x4c\xdd\x7c\x7c\x64\x3a\x9f\x65\xe1\x9e\x1e\xd3\xf7\x97\xdc\xd7\x65\xfc\xe6\x39\x7e\x3e\x13\x1b\x8c\x6b\xe7\xbf\xcb\xf4\x99\x5b\x77\x98\xbe\xc5\xea\x38\x74\x7b\xde\x83\xcb\xa2\x3d\x2f\xaf\xff\xc1\x12\xff\xb5\x25\x7e\xce\x8f\xeb\x33\x55\xc3\xb6\xf3\xdf\x61\x3a\xaf\xff\x31\x80\x4d\x34\xf1\xc3\xf9\x7d\xbd\x9b\x6e\xb6\xbd\xdf\xeb\xa7\x2d\x77\x13\x1e\x39\xff\x67\xc7\x7d\x8d\xde\xef\xff\xb7\x7f\x03\x00\x00\xff\xff\x26\xb0\x47\x54\xf0\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1656257486, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
