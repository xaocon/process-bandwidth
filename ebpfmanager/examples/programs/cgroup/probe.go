// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xbf\x6f\x13\x31\x14\xfe\x9c\x84\x34\xb4\x1d\x0a\x03\x2a\xa7\x0e" +
	"\x27\x90\xba\x80\x4c\x8b\x10\x82\xad\x8a\x44\x58\x3a\x20\x54\x36\xa4\xe3\x7a\x71\x4b\x94\xe4\x12\x7c\x17\x7e\x05" +
	"\x09\x31\xb0\x77\x61\x46\xfc\x07\x6c\x65\xe3\x5f\xe8\xc8\xc8\x88\xc4\x52\x24\x24\x36\x5c\x3d\xc7\x4e\x2c\xe7\x4e" +
	"\xe9\x93\x1c\xbf\xf7\xd9\xef\xbd\xef\x7d\x72\xee\xfd\x83\xdd\x56\x85\x31\x58\x63\xf8\x87\x59\x34\xb3\x6f\x95\x99" +
	"\xbf\x63\x7e\x57\xc1\x70\xcc\x80\x65\x00\xdd\xe0\xaf\x22\x94\x62\x29\xb2\x2c\x09\x4e\x75\xbc\xce\x80\x43\x39\x18" +
	"\x91\x3f\x0c\xc5\xe1\x38\xf8\x35\xc5\xa5\x68\x87\xe4\x0f\xd2\x30\x19\x07\x3f\xa7\xb8\xc8\xc3\x84\xfc\x78\x98\x8f" +
	"\xc6\xc1\x8f\x29\x9e\x8a\x57\xfa\xfe\x30\x4e\xba\xe3\xe0\x44\xe3\xdf\xbf\x4c\x38\x2d\x31\xe0\x44\x29\x75\x5c\x01" +
	"\x36\x01\x7c\x04\x50\x27\x3e\x7a\x26\xe0\x93\xe1\x4e\x35\x28\x9f\x7a\x50\x7d\xe2\x40\xfd\x89\x23\xf1\x23\xee\xcb" +
	"\x78\xf8\x68\x17\xc0\x7f\xa5\xd4\xe7\xdf\x0c\xeb\x9e\x16\x5a\x1f\xf7\xa0\xe6\xac\x06\x80\xb5\xd9\x5d\xeb\xb2\xb7" +
	"\x8f\xd1\x78\xb7\xc2\x56\x69\x16\xb3\xac\x7d\x2d\xd0\xdb\xb7\x27\xba\xfc\x1f\x55\x74\x56\x45\x75\x0e\xbb\x01\xe0" +
	"\x12\x2e\x4c\xe3\x9a\xd9\xaf\x69\xbc\x3e\x87\x37\x01\x5c\x76\xea\x58\x4e\x1b\xce\xcc\xfa\x09\xf0\x5c\xbc\xce\xc1" +
	"\x9b\x7b\x2d\x4e\xce\x44\xb8\x28\xeb\xee\xdf\x9a\x88\x87\xe8\xa5\x90\x59\x67\x90\x22\xea\x75\x12\x91\x66\x02\x5c" +
	"\x8a\x1e\x17\xcf\xa3\x03\x19\xf7\x85\xcd\x98\xdc\x8e\x0e\x46\x69\x82\x7e\xdc\x49\x79\x02\x9e\xe5\x32\x8f\xf7\xc1" +
	"\xb3\x37\x7d\xbd\x37\xf7\x5a\xe0\x72\xd0\x8e\xf3\x98\xce\xb6\xf9\xf6\xdd\x73\x48\x75\x2e\x7b\xaa\x75\x9b\xb7\x2d" +
	"\xf3\xce\x3f\x78\xb8\xff\x9f\x60\x66\xd5\x3d\x7c\xa7\xa4\x5f\xcd\x8b\xd7\x16\xe4\xfb\x6f\xa2\xe1\xc5\x2f\x4c\xfe" +
	"\x6d\x0f\x3f\x35\xfb\x66\x41\x3f\x77\x8e\x9b\xc6\xf7\x35\xb8\xc2\x8a\xf9\xfa\xf3\x5f\x2f\xc9\xdf\x28\xc9\xf7\xe3" +
	"\x5e\x41\x4d\xb2\xd0\x80\x57\x17\xf4\x5f\x2a\xc9\xbf\x6f\xc0\x70\x41\xfe\x3d\xf7\x4d\x3b\xf6\xcc\x5c\xdc\xf2\x70" +
	"\x5f\xff\x3b\x00\x2e\x16\xf1\x37\x05\xad\xde\x2b\xe6\x9e\xcd\xb7\x78\xbb\xa0\x37\xd9\x91\xe9\x7f\xe4\xf0\xae\x3a" +
	"\xf9\xf6\xbb\x71\x16\x00\x00\xff\xff\x40\x5f\x6c\xa0\xb8\x05\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1464,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594295090, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
