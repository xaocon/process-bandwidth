// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xbb\x6b\x14\x61\x10\xff\xed\xdd\x25\x39\x63\x88\xa7\x88\xc4\xe3" +
	"\x84\x25\x12\x2b\xd9\x3c\xf0\x05\x5a\x84\x40\x62\x73\x85\x68\xd2\x09\xcb\x7a\xb7\x49\x0e\x73\x0f\x76\x37\x7a\x31" +
	"\x82\x36\x82\x9d\x36\x8a\x8d\x18\xad\x52\xd8\xc7\x2e\xff\x42\x4a\x0b\x8b\x94\x82\x4d\xac\x6c\x82\x9f\xcc\xb7\xb3" +
	"\xb7\x9b\xb9\x5d\x03\xd6\x0e\xec\xcd\x37\xbf\x9b\xdf\x3c\xbe\x99\xbb\x7d\x36\x5f\x5d\xc8\x19\x06\x22\x31\xf0\x0b" +
	"\xb1\x15\xcb\xea\x40\x7c\x9e\xe5\xcf\x53\x30\xb0\x63\x40\xfb\xd7\xca\x87\x8a\xd0\xdd\x4f\xa1\xcf\x50\x0e\x38\x54" +
	"\x4a\x8d\x89\x60\x2f\x10\xfa\x2f\x61\x44\xdb\xc4\x1f\x06\xf0\xb0\xfc\x4d\x45\x76\xdd\x09\x9c\x5a\xf9\xab\xb6\x89" +
	"\xdf\x6a\x9b\x01\x9d\x5d\x3f\x30\x37\xcb\x7b\x61\x9e\x8f\x9c\xc7\x00\xf6\x94\x52\x3b\x39\x60\x94\xe3\x0f\x02\x18" +
	"\x40\xa5\x17\x9f\xc4\xc9\x15\x42\xcd\x7d\xac\x0c\x84\x75\xec\xde\x63\x3b\x0f\x98\x00\x1e\xb3\xbe\x70\xf1\x9c\xa8" +
	"\xef\xa0\x57\xcf\x65\x73\xa5\x4d\xe7\xc0\x9c\xa8\x6f\x96\xbf\xf7\xf0\x46\xab\xb3\x1e\xe3\xfb\x3d\xdc\x9c\xa8\x53" +
	"\x48\x2c\xb7\x3d\x73\x33\xd1\x97\xdb\xed\xb8\x74\xae\x05\x6e\x3d\xea\xcb\x29\x70\xbd\xf9\xf0\x90\xd6\xe7\x78\xa2" +
	"\x4f\x8a\xa3\x94\x52\xd1\xfd\xee\x96\x42\xfd\x86\xed\x1c\x00\x8a\x54\xe4\xf3\x7f\x89\x85\xf6\x8a\x76\x8a\xf6\x6d" +
	"\x98\x31\x9a\x09\xcd\x83\x66\x46\xf3\xa2\x99\xd2\x3c\x69\xe6\xa4\x87\x71\xfb\x4e\x15\xc0\x6f\xa5\xd4\x87\x1f\x06" +
	"\xc6\x44\x4c\xbd\x6e\xc9\x2f\x0a\x89\x87\x86\xc0\xf3\x29\x45\xfe\x4f\xee\xa2\xf8\xf4\xa4\x41\xbf\x86\x31\x7e\x22" +
	"\xd9\x4a\xfb\x21\x0a\x99\xd7\xa1\x7f\x2a\x89\xbf\xd5\x9f\x79\x6c\x09\xfc\x15\xe3\xcf\x45\xec\x97\x8c\xbf\x4e\xc9" +
	"\x99\x47\xbe\x0f\xb3\x00\x9c\xd6\x0d\xc5\x6d\x92\x4c\x68\xfc\x44\x1f\x4e\x7d\x9d\x49\xc4\x89\x7a\x73\xb4\x7f\xfc" +
	"\xe7\x52\x61\xdc\x64\x9b\x4c\x8a\x56\x49\xd8\xda\xdb\x0a\xdc\x6e\x00\x6b\x6e\x71\xc1\xd2\x07\xcf\x5d\xeb\xd6\x3b" +
	"\x93\xcd\x0d\x7b\x79\xbd\x55\xb3\x69\xb0\xb0\x1f\xb9\x9e\xdf\x68\xb7\x60\xaf\x35\x6a\x6e\xcb\x77\xb5\x9b\xe5\xae" +
	"\xda\xcb\x9e\xd3\x74\xd1\x74\x1a\x2d\xab\x06\xcb\x0f\xbc\xc0\x79\x00\xcb\xdf\x68\x92\x6e\x3a\x1d\xff\x48\x20\x9b" +
	"\x36\x44\xe7\x82\xe5\xb5\xc9\x20\xca\xb4\x35\x7d\x0d\xd5\xb9\xb9\x29\xfb\x6a\xa8\xae\x84\x6a\x46\x38\xf5\x5f\xe8" +
	"\x3f\x48\x55\xcf\xa1\x5f\xbe\xf0\x05\x7f\x16\xb8\x1c\xa3\xc1\xcf\xa0\xc0\x67\x33\xf2\x15\x84\x7d\xf6\x18\xbe\xdc" +
	"\xd5\xa2\xf0\x2b\xf1\x1c\xa5\xbc\x2b\xc4\xdf\x93\x8c\x72\x9f\x45\x1c\xc5\xef\x73\x7e\x79\x07\xfb\x9c\xb7\x62\xfc" +
	"\xbd\xfe\xf7\xcc\x9f\x11\xf8\x61\x2e\xce\x9b\x14\x43\xe8\x6e\x06\xbf\xc4\x05\x8d\x4b\x5c\xf0\x27\x33\xea\x9f\xc9" +
	"\xa7\xd7\x2b\xe7\x77\x29\x83\x7f\x23\x83\x2f\x6d\x3f\x25\x26\xc9\x2d\xe6\x9f\x3f\x26\xff\x50\x06\x7f\x89\xf9\xe6" +
	"\x31\xfc\x9b\x8c\xc9\x77\x50\x97\xf9\x53\x02\x97\xfb\x73\x3d\x63\x7f\xb6\x53\xf6\x67\x24\x65\x7f\x16\x33\xde\x7f" +
	"\xdb\x9c\xff\x20\x51\xf7\x60\x82\x1f\xfd\x1f\xff\x09\x00\x00\xff\xff\xc9\x46\x04\x2f\x28\x09\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2344,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594298158, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
