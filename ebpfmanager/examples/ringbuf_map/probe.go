// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x3f\x6f\xd3\x40\x14\xff\x5d\x12\xa8\x9b\x56\xa8\xa0\x0e\x95\xe9\x10\x55\x42\x82\x01\x97\x76\x60\x84\x2e\x50\x86\x0e\x15\x62\xc6\x38\xa9\x43\xac\xd4\x76\x64\x3b\x51\x21\x48\x48\x95\x2a\x75\x64\xe1\x03\xc0\xc4\x37\xc8\x58\x3e\x42\x06\x06\x46\x46\x46\x98\xd8\x30\x7a\xe7\x77\xb6\xb9\xd8\xca\x93\x92\x7b\xef\x77\xef\xef\xef\x5d\xf2\xfe\xc9\xd1\xd3\x86\x10\x50\x22\xf0\x07\x85\x55\xc8\x46\xb3\xd0\x0f\xf8\x7b\x1d\x02\x33\x01\xb4\x01\x0c\xcd\x5f\x29\xa1\x5b\x02\x18\x85\x5e\x40\x7a\x72\xef\xce\x78\x6a\xfe\xcc\xf1\x7e\xdc\x19\x90\x1e\x86\xc3\xce\xd4\xfc\x91\xe3\xc1\xeb\xee\x98\xf4\x7e\xe7\xee\x64\x6a\x7e\xcf\x71\x7f\x78\xe2\x91\x1e\xd9\x91\x37\x35\xe7\x12\xbf\x00\x70\x03\xc0\xd5\xa7\xac\x97\x15\x01\xcc\xd3\x34\x9d\x35\x80\x1d\xc2\xb9\x4f\xf2\xbb\x5e\xf2\xa7\x3e\x69\xae\x9e\xf9\x4d\xe6\xe9\xb5\xb3\x7c\x57\x9f\x39\x4f\x23\xcb\xb3\xa5\x0d\x3f\x6b\x02\x06\x9d\xad\x22\xef\x39\xd9\x7c\xff\x91\xcf\xdb\xff\x45\xb5\x72\x8d\x66\xa0\xfe\x69\x46\x9a\x8f\x38\xa0\xf9\x89\x23\xe2\xa7\x8d\xc3\xe3\x23\x00\x7f\xd3\x54\xf6\xb3\xa1\xf6\xf0\xf6\x39\x8c\x77\x6b\x62\x9d\xb8\xe0\x8f\x12\xa3\x6a\x41\x9a\xbc\x94\x5d\xfc\x4e\xab\xee\x9a\x68\x2e\x60\x87\x00\x6e\x62\x65\x61\x82\x47\x12\x37\x16\x70\xf2\xbc\x55\xca\xa3\x7a\xda\x97\xfe\xd7\x72\x7c\x93\xcf\xb9\x9a\x8b\xf7\xb2\x5d\xb2\x1b\xa4\x58\x89\x7b\x96\x60\x38\x8a\xc2\xae\x6b\x4f\xfa\xb1\x2d\x99\x83\x15\xb9\xa7\x19\xb8\x5b\x80\xbe\x33\x8a\x77\x99\x53\xdb\x77\x46\xb0\x27\x6e\x14\x7b\x61\x00\xfb\xd4\xeb\xb9\x41\xec\xca\x38\xcb\x1d\xd8\xfd\xc8\xf1\x5d\xf8\x8e\x17\x58\x3d\x58\x71\x12\x25\x4e\x17\x56\xfc\xc6\x97\x67\x14\x9e\x38\x89\x43\xf0\x9e\xb5\xf7\x70\x39\xab\xcb\xc5\x95\xfc\x2e\xca\x65\x23\x3b\x2f\x34\x5c\x5f\xa5\x28\x71\x54\x96\x83\x9a\x7a\x2d\xcd\xde\x5e\x12\xaf\xbf\x1d\x43\xf3\xa3\x77\xb6\x5a\x51\x67\xc0\xfd\xab\xf7\xb9\xc6\x73\xaa\x78\x85\xdf\xe7\xfa\x3a\x07\xcf\xb8\xee\xe6\x92\xfe\xc7\x1c\xbf\xaf\xe1\xaf\x38\x7e\x47\xc3\xf3\xdf\x8b\xaa\x53\x53\xff\x5c\x54\xd7\xd3\xf9\x7f\x5c\x13\x7f\x59\x13\xaf\xdb\x2f\xca\x6f\xba\x24\x1f\x38\xfe\x81\x86\xeb\xfc\x1f\xd7\xf0\x7f\x56\xc1\xff\x6a\x05\xff\x7e\x45\x6d\x92\xaf\x5c\xff\x0b\xdb\x42\xdb\x9f\xfa\x7f\xf9\x17\x00\x00\xff\xff\xc8\x5f\x5d\x56\x10\x06\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}

func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/probe.o",
		size:        1552,
		md5checksum: "",
		mode:        os.FileMode(436),
		modTime:     time.Unix(1689844855, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
