// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/prog1.o
// ebpf/bin/prog2.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProg1o = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x68\xd4\x40\x14\x7e\xd9\xdd\x76\xeb\xb6\x68\x2b\x14\x6a\xe8" +
	"\x21\xa0\x42\xbd\xa4\xdd\x15\x8b\x87\x0a\x65\xa1\xeb\xa5\x88\x94\x7a\x13\x62\x9a\x4d\xdd\xa5\xdd\x1f\x92\xb4\x58" +
	"\x57\xb0\x17\xa1\x47\x41\xc4\x9b\xa2\x5e\xbc\x7a\xda\x5e\xc4\xab\xe0\xa5\x47\x8f\x3d\x0a\x5e\xfc\x39\xe8\xa1\x38" +
	"\xf2\x26\x6f\x92\x74\x92\x18\x29\x28\x88\x3e\xc8\xce\xcc\x37\xef\xcd\xfb\xf6\xe5\x7b\xb3\x7b\x77\x61\xb1\x96\x53" +
	"\x14\x10\xa6\xc0\x57\x08\x57\xa1\xed\x0c\x85\xf3\x79\xfa\x3c\x01\x0a\xf4\x15\xe0\xfe\x96\x7a\xc0\x10\x7d\xfd\xcc" +
	"\xf7\x29\xe6\x00\x0e\x18\x63\x13\xd2\x61\xf7\xc0\xf7\xbf\x06\x63\x7c\x8d\xfb\x9a\xdd\xea\xe2\xdc\xdb\x2a\x41\x4f" +
	"\x7d\xcf\x04\x6e\x5a\x0d\x1b\xe7\x65\xad\xe9\xf6\xd4\xfd\x00\x77\x1b\xa6\x83\x73\xbb\x6e\x58\x3d\xf5\x5d\x80\x4f" +
	"\x75\x9d\x0e\xce\x6f\x96\xcf\x69\x3d\x75\xcf\xe7\xf3\x94\xf8\x28\x00\x7b\x8c\xb1\x7e\x0e\x40\x23\x1e\x83\x00\x30" +
	"\x00\xe3\x7c\xbf\x4f\x3c\x5d\xf5\x33\x13\xeb\x8d\x12\xc0\x9a\xfa\x31\x38\xbf\xed\x99\x4d\x9c\xb7\x5d\xed\x6c\x32" +
	"\x4f\xab\x73\x54\x9e\x66\xde\xcf\x9f\xc4\xf7\x74\x84\xef\xef\xa8\x6f\xe5\x2f\xa9\x6f\xe5\x0f\xd4\xb7\x4f\x75\x7c" +
	"\x48\x23\xd2\x2e\xd0\x53\x8a\x75\xc5\xbf\x6d\xff\x6b\x93\x6d\xa8\x45\xd4\x21\x6a\x15\x75\x8a\x5a\xc6\xfb\x0c\x7b" +
	"\x12\xfb\x31\x79\xdf\xea\x60\x2f\x60\x1f\x6c\x94\xb2\xcf\xab\x64\x9c\x57\x39\x7c\xde\xe5\xab\x8b\x00\xdf\x19\x63" +
	"\x4f\x3e\x28\x30\x21\xf1\xe5\x6d\x1a\xdd\x28\x44\x1e\xfc\x0d\x18\xf5\xe1\x51\xe1\x7f\x7b\x09\x86\xee\x0c\x2b\x23" +
	"\xd8\x7b\xf4\x08\xdb\xcf\x65\xd7\xe7\x3a\x3f\xfa\x13\x93\xf1\x97\xfc\x33\x0f\x6f\x24\xfc\x11\xe1\x5d\xe9\xde\xbb" +
	"\x4f\xf8\x94\x94\x73\x8b\xf0\xbd\x04\x2e\x79\xc8\xc7\xb0\x05\x00\x18\x83\xf0\xc7\xae\x40\xe3\x1c\xc7\x8f\xc5\x70" +
	"\xac\xc3\xc9\xc8\x39\xe2\x3b\xbf\xe2\xfe\x03\x01\x3e\x49\x7c\x9f\x73\x7c\x30\x86\x6b\xb4\x56\xa8\x97\xb6\x95\x70" +
	"\x3d\x8c\x7e\x91\x7d\x1e\xad\x7b\xf6\x2d\x0f\xf4\xea\x72\x4d\xc7\xc9\x9a\x63\x7b\x5d\xa7\xb3\x62\x1b\x9b\xab\xae" +
	"\xd1\x5a\xab\x37\x1d\xd0\x1d\x7b\x3d\xc0\xa7\x43\xdc\xd8\xb4\x1d\xb7\xd9\x69\x83\xb1\xde\xb4\xec\xb6\x6b\x73\x4f" +
	"\xdd\x6e\x18\xab\x8e\xd9\xb2\x81\x4b\x48\xb7\x40\x77\x3d\xc7\x33\x57\x40\x77\xb7\x5a\x7c\xac\x2e\xd7\x60\xb1\x5a" +
	"\x9d\x31\x66\x41\x77\x3a\x75\xd3\x33\xd1\xa5\xac\x97\x67\x7d\xf8\x82\x3f\x9c\x87\x96\xd9\x75\xa7\x0f\x49\xd0\xdf" +
	"\xa9\xc4\x77\xca\xf1\xf7\x72\x14\xab\xf3\xf7\x19\xb7\xdd\xa2\x3f\xbe\x95\x70\xf9\x3f\x8e\x12\xad\x6d\xc4\xe6\x53" +
	"\xf2\x15\xa4\xf5\x54\x46\xbc\xdc\x0b\x43\x92\xdf\x19\x80\x88\xba\x42\xdb\x21\xfe\x42\x1f\xc7\xe9\x7b\x8a\x78\xd1" +
	"\x87\xbb\x94\x5f\xae\x81\x46\xc0\xa4\xf2\x73\xfe\x8f\x53\xe2\xe7\x0a\xbf\x16\xbf\x4d\xf1\x15\x09\xbf\x41\x2d\xf0" +
	"\x40\xc2\x83\xfb\x83\xc6\x5a\x4a\xfe\x2f\x03\xc9\xf9\xe4\xf7\x77\x29\x25\xfe\x5b\x4a\xbc\xbc\xf6\x12\xce\x44\x3b" +
	"\xa0\xf8\x53\x19\xf9\x8b\x29\xf1\xe3\x24\x08\x2d\x23\x7e\x89\x30\xf9\x9a\xba\x48\xf1\x33\x12\x2e\xeb\xe7\x4a\x8a" +
	"\x7e\x5e\x90\x7e\x44\xbd\x51\x3f\x23\x09\xfa\x59\x4f\xc8\x8d\xd6\x10\xfc\x23\xf7\x51\x31\x12\x2f\xee\xfb\x1f\x01" +
	"\x00\x00\xff\xff\x1e\xb1\xa1\x42\x48\x0c\x00\x00")

func bindataProg1oBytes() ([]byte, error) {
	return bindataRead(
		_bindataProg1o,
		"/prog1.o",
	)
}



func bindataProg1o() (*asset, error) {
	bytes, err := bindataProg1oBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/prog1.o",
		size: 3144,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1594297957, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProg2o = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x3f\x68\x14\x4f\x14\xfe\xf6\xee\x7e\x77\xf7\x8b\xf1\x2f\x08\xc9" +
	"\x91\x62\x2c\x04\xb5\x98\xdc\x1d\x1a\x02\x36\xe1\xc0\xc4\x22\x45\x94\x14\x5a\xc8\xb2\xb9\x6c\x92\xe3\x72\x7f\xdc" +
	"\x5b\xa3\xc9\x05\xb4\x30\x8d\xd8\x58\x08\x16\x82\xa8\x20\x69\xac\x13\x30\x70\x29\x53\x5a\xa6\x4c\x19\xb0\x89\x20" +
	"\xd8\xb9\xf2\x66\x67\x6e\xd7\xc9\xee\x1d\xd6\xe6\xc1\x66\xde\x7c\x3b\xdf\xbc\xd9\x6f\xdf\x7d\x9b\xa7\xb7\xa6\x27" +
	"\x13\x86\x01\x15\x06\x7e\x22\x98\x05\xb1\x99\x0d\xf2\x09\xf9\xf7\x2c\x0c\x6c\x19\xc0\x00\x80\x6a\xee\xc8\x23\x74" +
	"\xc8\x00\xec\x55\x56\xa0\x9c\x71\xce\xdb\xb9\xc3\x2e\xbe\x64\x17\x18\xe5\x96\xcb\xaa\xed\xdc\x41\x17\xb7\x1c\x7b" +
	"\x9e\x72\xb3\x6c\x95\xdb\xb9\xfd\x2e\x7e\xbd\xc8\x2a\x94\xd7\x59\x6b\xa9\x9d\xfb\xea\xe3\x19\xe0\xb1\x53\x71\x29" +
	"\xaf\xd4\x17\x59\x7b\x6d\xcf\xc7\xb3\xc0\x95\xa6\xd3\xa0\x7c\xb1\x78\x95\xb5\x5f\xec\x0a\xbc\xf3\xde\x3f\x73\xc6" +
	"\x00\x76\x3d\xcf\xdb\x4a\x00\x45\x00\x1b\x00\xd2\x80\x38\x3f\x3d\x6f\x39\xb7\x23\xd6\xd3\xfc\x9a\x98\x6f\xfb\xfc" +
	"\x4f\x92\x9f\x06\x76\x3c\xcf\xeb\x7c\x94\xf3\x24\xb0\xed\x79\xde\x90\x26\x56\x67\xce\x1f\xb7\x52\xfe\x48\x75\x12" +
	"\x72\xdf\x1f\x46\xb0\x6f\x1c\x6f\x03\xfe\x79\x3a\x69\x7f\x7e\x31\x3d\x0c\xb5\x9e\x15\x18\xa7\x9c\xf3\x01\x84\x75" +
	"\x6d\x32\x4b\xe8\xc1\xaa\xf6\x6a\x58\xd7\xc6\x23\xd7\xa6\xdc\x31\x6b\x56\x58\xd7\x1b\xf9\x3c\xf3\xf5\x63\x8e\xd2" +
	"\x55\xe9\xd8\x4b\xb7\x7c\x48\xb7\xce\x07\x79\x3f\x11\xad\x4b\xc7\x8a\xd1\x41\x3e\xef\xeb\x6e\xbf\x01\x29\x79\x0d" +
	"\x44\xf4\xdd\xbf\x1c\x27\xda\xc4\xc7\x69\xa9\x0b\x4e\xb4\xe9\x19\xe4\x89\xe4\x87\xe4\x99\xe4\x97\xe4\xa9\xe4\xa7" +
	"\xe4\xb9\xe4\xb7\xe4\xc9\xe4\xc7\xe4\xd9\xe4\xd7\xba\x96\x3a\x9f\xbc\x83\x7c\x83\xbc\x85\x7c\xa5\xa9\xb1\xa7\x66" +
	"\xa6\xf1\xcb\xf3\xbc\x77\xdf\x0c\x0c\x69\x7b\x09\xcb\x0b\xdf\x48\x85\x2e\xfa\xbe\x9c\x0b\xd6\xaa\xd4\x58\xbb\x8b" +
	"\xec\xfa\x29\x63\x90\xbc\x4b\x5e\x2a\x26\x12\xfd\x9f\xdf\x15\xdb\x7f\xf7\x74\xdc\xb7\xb7\x24\xf2\x11\x7b\x24\x91" +
	"\x3c\x86\xcd\x00\x38\x8f\xe0\x23\xa8\x7a\x6f\x4a\xe0\xff\x1f\xc3\xe9\xfc\x17\x42\xfb\xa8\xb3\xde\x14\xeb\xd3\x18" +
	"\x91\xfe\xaf\xc6\x45\x89\xab\x50\xf8\x67\x81\xff\x77\x0c\x57\x1f\x69\x1a\xa8\xfa\x78\x68\x9e\xa1\x75\xa1\x65\xe2" +
	"\x14\xdc\xb5\x9f\xb8\xe0\xa5\xd9\x49\x4e\x49\xb5\xe9\x34\xe6\x6c\x73\x65\xa1\x65\xd6\xaa\xf3\x15\x07\xdc\xb1\x97" +
	"\x7d\x70\x34\x00\x6b\x56\xb3\x35\x4a\x7f\x4c\xff\x85\xc3\x5c\xb1\x9d\x56\xa5\x51\x87\xb9\x5c\x29\xdb\xf5\x96\x2d" +
	"\x78\xdc\x5e\x32\x17\x1c\xab\x66\x43\x2c\x93\x8d\x05\xd1\x3a\xbc\x0c\xde\x72\x1d\xd7\x9a\x03\x6f\xad\xd6\xc4\x58" +
	"\x9a\x9d\x04\x77\x1a\xf3\x96\x6b\xd1\xbd\x02\x2f\x8c\x61\xba\x54\xca\x9b\x45\xbf\xe2\x1f\xed\x19\xfd\x5e\xff\x36" +
	"\xd6\x95\x0e\x5a\x1c\x66\xfc\xf1\x8b\x86\xeb\xff\x03\x19\xf2\x4a\x6b\xf8\x44\x4c\xbd\x94\x36\xbf\xdc\x87\xaf\xf7" +
	"\x72\x56\x5b\x77\x49\xbe\x67\x3d\xb6\xe5\xf9\x99\x9c\x9f\x91\xcf\xa9\xf8\xea\x77\xb4\x19\xee\x85\x50\x3c\x93\x75" +
	"\x47\x8c\xde\xe7\x1f\x8b\xe1\xbf\x95\xc0\x78\xa2\x37\xff\x95\xe4\x17\x35\xfc\x40\xb6\x76\x53\xc3\xbb\xbf\x7f\x39" +
	"\xde\x89\xa9\x3f\x93\x8e\xae\xa7\xbf\xbf\xdb\x31\xfc\xd9\x18\xbe\x3e\x7f\x19\xb1\x27\xc5\x3d\xc9\x1f\xee\x53\x3f" +
	"\x13\xc3\x7f\x28\xf9\xac\x0f\xff\x81\xc4\x74\xbb\x7a\x23\xf9\x79\x0d\xd7\xfb\xe7\x7e\x4c\xff\xec\xcb\xfe\x51\x7a" +
	"\x53\xff\x0c\x46\xf4\xcf\xf3\x88\xda\x14\x7b\xb2\xfe\x51\xe8\xdc\xa9\x10\x5f\xf9\xf5\xef\x00\x00\x00\xff\xff\x22" +
	"\xe6\xc7\x14\x68\x0c\x00\x00")

func bindataProg2oBytes() ([]byte, error) {
	return bindataRead(
		_bindataProg2o,
		"/prog2.o",
	)
}



func bindataProg2o() (*asset, error) {
	bytes, err := bindataProg2oBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/prog2.o",
		size: 3176,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1594297957, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/prog1.o": bindataProg1o,
	"/prog2.o": bindataProg2o,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"prog1.o": {Func: bindataProg1o, Children: map[string]*bintree{}},
		"prog2.o": {Func: bindataProg2o, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
